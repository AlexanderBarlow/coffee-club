generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @default(uuid())
  email          String  @unique
  tier           Tier    @default(BRONZE)
  points         Int     @default(0)
  roleId         String?
  role           Role?   @relation(fields: [roleId], references: [id])
  employeeNumber String?
  storeNumber    String?
  storeId        String?
  store          Store?  @relation("StoreToUsers", fields: [storeId], references: [id])

  orders         Order[]
  reviews        Review[]
  payrollRecords Payroll[]
  shifts         Shift[]
  activities     CustomerActivity[]
  redemptions    RewardRedemption[]

  createdAt DateTime @default(now())
}

model Role {
  id        String   @id @default(uuid())
  name      RoleName @unique
  users     User[]
  createdAt DateTime @default(now())
}

model Order {
  id              String        @id @default(uuid())
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  stripeSessionId String
  items           Json
  total           Float
  status          OrderStatus   @default(PENDING)
  paymentStatus   PaymentStatus @default(UNPAID)
  review          Review?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  stored          Boolean       @default(false)
}

model Review {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @unique
  rating    Int
  comment   String
  createdAt DateTime @default(now())
}

model TempCheckout {
  id        String   @id @default(uuid())
  userId    String
  cart      Json
  createdAt DateTime @default(now())
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  emoji       String?
  description String?
  createdAt   DateTime @default(now())
  drinks      Drink[]
}

model Drink {
  id               String   @id @default(uuid())
  name             String   @unique
  description      String
  price            Float
  imageUrl         String?
  available        Boolean  @default(true)
  featured         Boolean  @default(false)
  createdAt        DateTime @default(now())
  customizeOptions Json?

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  syrups Syrup[] @relation("DrinkSyrups")
  sauces Sauce[] @relation("DrinkSauces")
  milks  Milk[]  @relation("DrinkMilks")
}

model Syrup {
  id          String  @id @default(uuid())
  name        String  @unique
  brand       String
  description String
  drinks      Drink[] @relation("DrinkSyrups")
}

model Sauce {
  id          String  @id @default(uuid())
  name        String  @unique
  brand       String
  description String
  drinks      Drink[] @relation("DrinkSauces")
}

model Milk {
  id          String  @id @default(uuid())
  name        String  @unique
  emoji       String?
  brand       String
  description String
  raw         Boolean @default(false)
  drinks      Drink[] @relation("DrinkMilks")
}

model Rewards {
  id          String @id @default(uuid())
  name        String @unique
  description String
}

model Payroll {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  hoursWorked    Float
  hourlyRate     Float
  totalPay       Float
  payPeriodStart DateTime
  payPeriodEnd   DateTime
  createdAt      DateTime @default(now())
}

model Shift {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  startTime  DateTime
  endTime    DateTime
  roleAtTime String
  createdAt  DateTime @default(now())
}

model Store {
  id           String   @id @default(uuid())
  name         String
  location     String
  contactEmail String
  staff        User[]   @relation("StoreToUsers")
  createdAt    DateTime @default(now())
}

model InventoryLog {
  id        String   @id @default(uuid())
  itemName  String
  quantity  Int
  type      String // e.g., "restock" or "usage"
  note      String?
  createdAt DateTime @default(now())
}

model CustomerActivity {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  action    String // e.g., "review_submitted"
  detail    String
  createdAt DateTime @default(now())
}

model RewardRedemption {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  rewardName String
  pointsUsed Int
  redeemedAt DateTime @default(now())
}

model StoreMetricsSnapshot {
  id                String   @id @default(uuid())
  date              DateTime
  totalRevenue      Float
  totalOrders       Int
  averageOrderValue Float
  totalLaborHours   Float
  createdAt         DateTime @default(now())
}

enum Tier {
  BRONZE
  SILVER
  GOLD
  VIP
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  UNPAID
  PAID
  REFUNDED
}

enum RoleName {
  USER
  ADMIN
  BARISTA
  MANAGER
  SUPERVISOR
}
